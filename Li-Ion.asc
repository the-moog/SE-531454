Version 4.1
SHEET 1 1468 956
WIRE -64 576 -304 576
WIRE -16 576 -64 576
WIRE 128 576 -16 576
WIRE 384 576 320 576
WIRE 560 576 464 576
WIRE 608 576 560 576
WIRE 752 576 688 576
WIRE 784 576 752 576
WIRE 912 576 864 576
WIRE 1024 576 912 576
WIRE -304 640 -304 576
WIRE 128 640 128 576
WIRE 320 640 320 576
WIRE -64 656 -64 576
WIRE 560 688 560 576
WIRE 608 688 560 688
WIRE 752 688 752 576
WIRE 752 688 672 688
WIRE 800 688 752 688
WIRE 912 688 912 576
WIRE 912 688 864 688
WIRE -304 800 -304 720
WIRE -176 800 -304 800
WIRE -64 800 -64 720
WIRE -64 800 -176 800
WIRE 128 800 128 720
WIRE 128 800 -64 800
WIRE 176 800 128 800
WIRE 320 800 320 720
WIRE 320 800 256 800
WIRE 1024 800 320 800
FLAG 1024 576 cell+
IOPIN 1024 576 BiDir
FLAG 1024 800 cell-
IOPIN 1024 800 BiDir
FLAG -176 800 0
FLAG -16 576 V.soc
SYMBOL res -320 624 R0
SYMATTR InstName R.self_discharge
SYMATTR Value R=R.sd()
SYMBOL cap -80 656 R0
SYMATTR InstName C.capacity
SYMATTR Value Q=C.eff()*x
SYMBOL bi 128 640 R0
SYMATTR InstName I.batt
SYMATTR Value I=I(V.batt)
SYMBOL res 480 560 R90
WINDOW 0 0 56 VBottom 2
WINDOW 3 32 56 VTop 2
SYMATTR InstName R.series
SYMATTR Value R=R.s(soc())
SYMBOL res 704 560 R90
WINDOW 0 0 56 VBottom 2
WINDOW 3 32 56 VTop 2
SYMATTR InstName R.trans_short
SYMATTR Value R=R.ts(soc())
SYMBOL res 880 560 R90
WINDOW 0 0 56 VBottom 2
WINDOW 3 32 56 VTop 2
SYMATTR InstName R.trans_long
SYMATTR Value R=R.tl(soc())
SYMBOL bv 320 624 R0
SYMATTR InstName V.batt
SYMATTR Value V=V.oc(soc())
SYMBOL cap 672 672 R90
WINDOW 0 0 32 VBottom 2
WINDOW 3 32 32 VTop 2
SYMATTR InstName C.trans_short
SYMATTR Value Q=C.ts(soc())*x
SYMBOL cap 864 672 R90
WINDOW 0 0 32 VBottom 2
WINDOW 3 32 32 VTop 2
SYMATTR InstName C.trans_long
SYMATTR Value Q=C.tl(soc())*x
SYMBOL res 272 784 R90
WINDOW 0 0 56 VBottom 2
WINDOW 3 32 56 VTop 2
SYMATTR InstName R1
SYMATTR Value {1/GMIN}
TEXT 120 88 Left 2 !.func C.eff()=3600*{Capacity.Ah}\n; NOTE SOC='State of Charge' between 0 (empty) and 1 (full)\n.func soc()=Nominal.V/V(V.soc)\n.func V.oc(SOC)=(-1.031*exp(-35*SOC))+{Nominal.V}+(0.2156*SOC)+(-0.1178*(SOC**2))+(.3201*POW(SOC,3))\n.func R.s(SOC)=(0.1562*exp(-24.37*SOC))+0.07446\n.func R.ts(SOC)=(0.3208*exp(-29.14*SOC))+0.04669\n.func C.ts(SOC)=(-752.9*exp(-13.51*SOC))+703.6\n.func R.tl(SOC)=(6.603*exp(-155.2*SOC))+0.04984\n.func C.tl(SOC)=(-6056*exp(-27.12*SOC))+4475
TEXT 128 -48 Left 2 !.param Nominal.V=3.685V Capacity.Ah=13 SelfDischarge.R=0 Cycle.count=1\n; R.discharge=0 disables self-discharge (e.g. LiSoCl where self discharge is very low)\n; cycle and temp (temperature) not yet implimented in model
TEXT 120 392 Left 2 !.func R.sd()=if({SelfDischarge.R}<1000,1/GMIN,abs({SelfDischarge.R}))
TEXT -80 880 Left 2 !.op
TEXT 504 896 Left 2 !.ic V(cell+)={Nominal.V} V(V.soc)={Nominal.V}
TEXT 104 -424 Left 2 ;V1.0 - April 2025\nBy J. Morgan (the-moog@github.com)\nUse with LTSpice\nBased on http://rincon-mora.gatech.edu/publicat/jrnls/tec05_batt_mdl.pdf\nas referenced in https://electronics.stackexchange.com/questions/531454/lithium-ion-battery-model-in-ltspice\n \nAll credit to\nMin Chen, Student Member, IEEE, and Gabriel A. Rincón-Mora, Senior Member, IEEE\nGeorgia Tech Analog and Power IC Design Lab\nOn who's paper this is based.
TEXT -224 936 Left 2 ;Note for capacitors using Q=... 'x' is a special variable and is the terminal voltage
TEXT 616 512 Left 2 ;Effects of transients
TEXT -216 520 Left 2 ;Effects of discharge
TEXT 336 512 Left 2 ;Internal resistances
